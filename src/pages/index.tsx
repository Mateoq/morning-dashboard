import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { Geist, Geist_Mono } from 'next/font/google';

import { GeoContext } from '@/context/geo-context';
import { getGeoFromIP } from '@/services';
import { Geo } from '@/types';
import { Dashboard } from '@/components';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

const geoMock = {
  status: 'success',
  country: 'United States',
  countryCode: 'US',
  region: 'CA',
  regionName: 'California',
  city: 'San Francisco',
  zip: '94105',
  lat: 37.7749,
  lon: -122.4194,
  timezone: 'America/Los_Angeles',
  isp: 'Comcast Cable Communications, LLC',
  org: 'Comcast',
  as: 'AS7922 Comcast Cable Communications, LLC',
  query: '8.8.8.8',
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { req } = context;

  const forwarded = req.headers['x-forwarded-for'];
  const ip =
    typeof forwarded === 'string'
      ? forwarded.split(',')[0]
      : req.socket?.remoteAddress;

  if (process.env.NODE_ENV === 'development') {
    return {
      props: {
        geo: geoMock,
      },
    };
  }

  const geo = await getGeoFromIP(ip || '');
  return {
    props: {
      geo,
    },
  };
};

export interface HomeProps {
  geo: Geo | null;
}

export default function Home({ geo }: HomeProps) {
  return (
    <>
      <Head>
        <title>Morning Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${geistSans.variable} ${geistMono.variable}`}>
        <GeoContext.Provider value={geo}>
          <Dashboard />
        </GeoContext.Provider>
      </main>
    </>
  );
}
